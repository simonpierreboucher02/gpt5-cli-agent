[
  {
    "role": "user",
    "content": "give me a python code for snake game",
    "timestamp": "2025-08-29T01:56:10.378373",
    "metadata": {}
  },
  {
    "role": "assistant",
    "content": "# Snake Game in Python with Pygame\n# Requires: pip install pygame\n\nimport pygame\nimport random\nimport sys\n\n# Grid and window settings\nCELL_SIZE = 20\nCOLS, ROWS = 32, 24\nWIDTH, HEIGHT = COLS * CELL_SIZE, ROWS * CELL_SIZE\n\n# Colors\nBG = (30, 30, 30)\nSNAKE = (0, 200, 0)\nSNAKE_HEAD = (0, 255, 80)\nFOOD = (220, 50, 50)\nTEXT = (240, 240, 240)\n\nMOVE_EVENT = pygame.USEREVENT + 1\nSTART_DELAY_MS = 140\nMIN_DELAY_MS = 70\nSPEEDUP_PER_APPLE = 4  # lower = faster\n\nDIRS = {\n    pygame.K_UP: (0, -1),\n    pygame.K_w: (0, -1),\n    pygame.K_DOWN: (0, 1),\n    pygame.K_s: (0, 1),\n    pygame.K_LEFT: (-1, 0),\n    pygame.K_a: (-1, 0),\n    pygame.K_RIGHT: (1, 0),\n    pygame.K_d: (1, 0),\n}\n\ndef is_opposite(a, b):\n    return a[0] == -b[0] and a[1] == -b[1]\n\ndef place_food(snake):\n    snake_set = set(snake)\n    while True:\n        pos = (random.randint(0, COLS - 1), random.randint(0, ROWS - 1))\n        if pos not in snake_set:\n            return pos\n\ndef draw_rect(surface, color, cell_pos):\n    x, y = cell_pos\n    rect = pygame.Rect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE)\n    pygame.draw.rect(surface, color, rect)\n\ndef reset_game():\n    mid = (COLS // 2, ROWS // 2)\n    snake = [mid, (mid[0] - 1, mid[1]), (mid[0] - 2, mid[1])]\n    direction = (1, 0)\n    food = place_food(snake)\n    score = 0\n    delay = START_DELAY_MS\n    return snake, direction, food, score, delay\n\ndef main():\n    pygame.init()\n    screen = pygame.display.set_mode((WIDTH, HEIGHT))\n    pygame.display.set_caption(\"Snake\")\n    clock = pygame.time.Clock()\n    font = pygame.font.SysFont(None, 28)\n    big_font = pygame.font.SysFont(None, 64)\n\n    snake, direction, food, score, delay = reset_game()\n    game_over = False\n\n    pygame.time.set_timer(MOVE_EVENT, delay)\n\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n\n            if event.type == pygame.KEYDOWN:\n                if event.key in DIRS and not game_over:\n                    new_dir = DIRS[event.key]\n                    # Prevent 180-degree turns if snake length > 1\n                    if not is_opposite(new_dir, direction) or len(snake) == 1:\n                        direction = new_dir\n                elif game_over:\n                    if event.key in (pygame.K_r, pygame.K_RETURN, pygame.K_SPACE):\n                        snake, direction, food, score, delay = reset_game()\n                        game_over = False\n                        pygame.time.set_timer(MOVE_EVENT, delay)\n                    elif event.key in (pygame.K_q, pygame.K_ESCAPE):\n                        pygame.quit()\n                        sys.exit()\n                else:\n                    if event.key == pygame.K_ESCAPE:\n                        pygame.quit()\n                        sys.exit()\n\n            if event.type == MOVE_EVENT and not game_over:\n                # Compute new head\n                head_x, head_y = snake[0]\n                dx, dy = direction\n                new_head = (head_x + dx, head_y + dy)\n\n                # Check wall collision\n                if not (0 <= new_head[0] < COLS and 0 <= new_head[1] < ROWS):\n                    game_over = True\n                # Check self collision\n                elif new_head in snake:\n                    game_over = True\n                else:\n                    snake.insert(0, new_head)\n                    if new_head == food:\n                        score += 1\n                        food = place_food(snake)\n                        delay = max(MIN_DELAY_MS, delay - SPEEDUP_PER_APPLE)\n                        pygame.time.set_timer(MOVE_EVENT, delay)\n                    else:\n                        snake.pop()  # move forward\n\n        # Draw\n        screen.fill(BG)\n\n        # Food\n        draw_rect(screen, FOOD, food)\n\n        # Snake\n        if snake:\n            draw_rect(screen, SNAKE_HEAD, snake[0])\n        for seg in snake[1:]:\n            draw_rect(screen, SNAKE, seg)\n\n        # Score\n        score_surf = font.render(f\"Score: {score}\", True, TEXT)\n        screen.blit(score_surf, (8, 6))\n\n        # Game over overlay\n        if game_over:\n            overlay = pygame.Surface((WIDTH, HEIGHT), pygame.SRCALPHA)\n            overlay.fill((0, 0, 0, 140))\n            screen.blit(overlay, (0, 0))\n\n            go_text = big_font.render(\"Game Over\", True, TEXT)\n            prompt = font.render(\"Press R/Enter to restart, Q/Esc to quit\", True, TEXT)\n            screen.blit(go_text, go_text.get_rect(center=(WIDTH // 2, HEIGHT // 2 - 20)))\n            screen.blit(prompt, prompt.get_rect(center=(WIDTH // 2, HEIGHT // 2 + 30)))\n\n        pygame.display.flip()\n        clock.tick(60)\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-29T01:56:37.310172",
    "metadata": {}
  },
  {
    "role": "user",
    "content": "thanks",
    "timestamp": "2025-08-29T01:56:41.208008",
    "metadata": {}
  },
  {
    "role": "assistant",
    "content": "You're welcome! If you want features added (wrap-around walls, high score, skins, etc.), just say the word. Tip: install Pygame with “pip install pygame” and run the file with “python snake.py”.",
    "timestamp": "2025-08-29T01:56:45.768851",
    "metadata": {}
  }
]