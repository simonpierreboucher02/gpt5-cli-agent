[
  {
    "role": "user",
    "content": "give me a python code for snake game",
    "timestamp": "2025-08-29T01:58:54.999959",
    "metadata": {}
  },
  {
    "role": "assistant",
    "content": "Here's a self-contained Python script for a simple Snake game using Pygame. Save it as snake.py and run with Python. You may need to install Pygame first (pip install pygame).\n\n```python\nimport pygame\nimport random\nimport sys\n\ndef main():\n    pygame.init()\n\n    # Game settings\n    WIDTH, HEIGHT = 600, 600\n    GRID = 20  # size of a single grid cell in pixels\n    COLS = WIDTH // GRID\n    ROWS = HEIGHT // GRID\n\n    screen = pygame.display.set_mode((WIDTH, HEIGHT))\n    pygame.display.set_caption(\"Snake\")\n\n    clock = pygame.time.Clock()\n\n    # Colors\n    WHITE = (255, 255, 255)\n    BLACK = (0, 0, 0)\n    GREEN = (0, 255, 0)\n    DARK_GREEN = (0, 180, 0)\n    RED = (255, 0, 0)\n\n    font = pygame.font.SysFont(None, 36)\n\n    def spawn_food(snake):\n        while True:\n            pos = (random.randrange(COLS), random.randrange(ROWS))\n            if pos not in snake:\n                return pos\n\n    # Initial state\n    snake = [(COLS // 2, ROWS // 2)]\n    dx, dy = 1, 0\n    next_dx, next_dy = dx, dy\n    food = spawn_food(snake)\n    score = 0\n\n    MOVE_DELAY = 140  # ms per move; decreases as you grow\n    timer = 0\n\n    running = True\n    game_over = False\n\n    while running:\n        delta = clock.tick(60)  # limit to ~60 FPS\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                running = False\n            elif event.type == pygame.KEYDOWN:\n                ndx, ndy = None, None\n                if event.key in (pygame.K_UP, pygame.K_w):\n                    ndx, ndy = 0, -1\n                elif event.key in (pygame.K_DOWN, pygame.K_s):\n                    ndx, ndy = 0, 1\n                elif event.key in (pygame.K_LEFT, pygame.K_a):\n                    ndx, ndy = -1, 0\n                elif event.key in (pygame.K_RIGHT, pygame.K_d):\n                    ndx, ndy = 1, 0\n                elif event.key == pygame.K_r and game_over:\n                    # Restart the game\n                    snake = [(COLS // 2, ROWS // 2)]\n                    dx, dy = 1, 0\n                    next_dx, next_dy = dx, dy\n                    food = spawn_food(snake)\n                    score = 0\n                    MOVE_DELAY = 140\n                    timer = 0\n                    game_over = False\n                if ndx is not None:\n                    # Prevent reversing into itself\n                    if (ndx, ndy) != (-dx, -dy):\n                        next_dx, next_dy = ndx, ndy\n\n        if not game_over:\n            timer += delta\n            if timer >= MOVE_DELAY:\n                timer -= MOVE_DELAY\n                dx, dy = next_dx, next_dy\n                head = snake[-1]\n                new_head = (head[0] + dx, head[1] + dy)\n\n                # Wall collision\n                if not (0 <= new_head[0] < COLS and 0 <= new_head[1] < ROWS):\n                    game_over = True\n                # Self collision\n                elif new_head in snake:\n                    game_over = True\n                else:\n                    snake.append(new_head)\n                    if new_head == food:\n                        score += 1\n                        food = spawn_food(snake)\n                        # Slightly speed up as you grow\n                        MOVE_DELAY = max(60, MOVE_DELAY - 1)\n                    else:\n                        snake.pop(0)\n\n        # Rendering\n        screen.fill((30, 30, 30))\n\n        # Draw food\n        fx, fy = food\n        pygame.draw.rect(screen, RED, (fx * GRID, fy * GRID, GRID, GRID))\n\n        # Draw snake\n        for i, (sx, sy) in enumerate(snake):\n            color = GREEN if i == len(snake) - 1 else DARK_GREEN\n            pygame.draw.rect(screen, color, (sx * GRID + 1, sy * GRID + 1, GRID - 2, GRID - 2))\n\n        # Score\n        score_surf = font.render(\"Score: {}\".format(score), True, WHITE)\n        screen.blit(score_surf, (10, 10))\n\n        if game_over:\n            over_surf = font.render(\"Game Over! Press R to restart\", True, WHITE)\n            rect = over_surf.get_rect(center=(WIDTH // 2, HEIGHT // 2))\n            screen.blit(over_surf, rect)\n\n        pygame.display.flip()\n\n    pygame.quit()\n    sys.exit()\n\nif __name__ == \"__main__\":\n    main()\n```\n\nIf you prefer a no-dependency version, I can provide a turtle-based version as well.",
    "timestamp": "2025-08-29T01:59:28.684129",
    "metadata": {}
  }
]