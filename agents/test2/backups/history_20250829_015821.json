[
  {
    "role": "user",
    "content": "give me a python code for snake game",
    "timestamp": "2025-08-29T01:57:50.294324",
    "metadata": {}
  },
  {
    "role": "assistant",
    "content": "Below is a simple, complete Snake game written with Pygame. Save it to a file (e.g., snake.py), install pygame (pip install pygame), and run with python3 snake.py.\n\n```python\nimport pygame\nimport random\nimport sys\n\n# Configuration\nCELL_SIZE = 20\nCELL_NUMBER = 30  # grid will be CELL_NUMBER x CELL_NUMBER\nSCREEN_SIZE = CELL_SIZE * CELL_NUMBER\nFPS = 10\nSNAKE_COLOR = (17, 24, 47)\nFOOD_COLOR = (200, 30, 30)\nBG_COLOR = (167, 219, 216)\nGRID_COLOR = (200, 200, 200)\nTEXT_COLOR = (30, 30, 30)\n\ndef random_food_position(snake):\n    while True:\n        pos = (random.randint(0, CELL_NUMBER - 1), random.randint(0, CELL_NUMBER - 1))\n        if pos not in snake:\n            return pos\n\ndef draw_rect(surface, color, position):\n    x, y = position\n    rect = pygame.Rect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE)\n    pygame.draw.rect(surface, color, rect)\n\ndef main():\n    pygame.init()\n    screen = pygame.display.set_mode((SCREEN_SIZE, SCREEN_SIZE))\n    pygame.display.set_caption(\"Snake\")\n    clock = pygame.time.Clock()\n    font = pygame.font.SysFont(None, 36)\n\n    # Initial snake (3 cells) in center heading to the right\n    start_x = CELL_NUMBER // 2\n    start_y = CELL_NUMBER // 2\n    snake = [(start_x - 1, start_y), (start_x, start_y), (start_x + 1, start_y)]\n    direction = (-1, 0)  # start moving left (because head is at rightmost)\n\n    food = random_food_position(snake)\n    score = 0\n    running = True\n    game_over = False\n\n    while running:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                running = False\n\n            if event.type == pygame.KEYDOWN:\n                if not game_over:\n                    if event.key in (pygame.K_UP, pygame.K_w) and direction != (0, 1):\n                        direction = (0, -1)\n                    elif event.key in (pygame.K_DOWN, pygame.K_s) and direction != (0, -1):\n                        direction = (0, 1)\n                    elif event.key in (pygame.K_LEFT, pygame.K_a) and direction != (1, 0):\n                        direction = (-1, 0)\n                    elif event.key in (pygame.K_RIGHT, pygame.K_d) and direction != (-1, 0):\n                        direction = (1, 0)\n                else:\n                    # In game over state, allow restart or quit\n                    if event.key == pygame.K_r:\n                        # reset game\n                        snake = [(start_x - 1, start_y), (start_x, start_y), (start_x + 1, start_y)]\n                        direction = (-1, 0)\n                        food = random_food_position(snake)\n                        score = 0\n                        game_over = False\n                    elif event.key == pygame.K_q:\n                        running = False\n\n        if not game_over:\n            # Move snake\n            head_x, head_y = snake[-1]\n            dx, dy = direction\n            new_head = (head_x + dx, head_y + dy)\n\n            # Check collisions with walls\n            if (new_head[0] < 0 or new_head[0] >= CELL_NUMBER or\n                new_head[1] < 0 or new_head[1] >= CELL_NUMBER):\n                game_over = True\n            # Check collisions with self\n            elif new_head in snake:\n                game_over = True\n            else:\n                snake.append(new_head)\n\n                # Check for eating food\n                if new_head == food:\n                    score += 1\n                    food = random_food_position(snake)\n                else:\n                    # remove tail\n                    snake.pop(0)\n\n        # Draw\n        screen.fill(BG_COLOR)\n\n        # optional grid\n        for x in range(CELL_NUMBER):\n            pygame.draw.line(screen, GRID_COLOR, (x * CELL_SIZE, 0), (x * CELL_SIZE, SCREEN_SIZE))\n        for y in range(CELL_NUMBER):\n            pygame.draw.line(screen, GRID_COLOR, (0, y * CELL_SIZE), (SCREEN_SIZE, y * CELL_SIZE))\n\n        # draw food and snake\n        draw_rect(screen, FOOD_COLOR, food)\n        for segment in snake:\n            draw_rect(screen, SNAKE_COLOR, segment)\n\n        # draw score\n        score_surf = font.render(f\"Score: {score}\", True, TEXT_COLOR)\n        screen.blit(score_surf, (10, 10))\n\n        if game_over:\n            over_surf = font.render(\"Game Over! R to restart, Q to quit\", True, TEXT_COLOR)\n            rect = over_surf.get_rect(center=(SCREEN_SIZE // 2, SCREEN_SIZE // 2))\n            screen.blit(over_surf, rect)\n\n        pygame.display.flip()\n        clock.tick(FPS)\n\n    pygame.quit()\n    sys.exit()\n\nif __name__ == \"__main__\":\n    main()\n```\n\nControls\n- Arrow keys or WASD to move\n- R to restart after game over\n- Q or window close to quit\n\nNotes\n- Install pygame with: pip install pygame\n- Adjust CELL_NUMBER and FPS to change grid size and speed.",
    "timestamp": "2025-08-29T01:58:14.811435",
    "metadata": {}
  },
  {
    "role": "user",
    "content": "thanks",
    "timestamp": "2025-08-29T01:58:19.436554",
    "metadata": {}
  }
]